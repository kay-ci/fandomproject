// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using UserInfo;

#nullable disable

namespace FandomAppSpace.Migrations
{
    [DbContext(typeof(FanAppContext))]
    partial class FanAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.Property<int>("CategoriesCategoryID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("eventsEventID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("CategoriesCategoryID", "eventsEventID");

                    b.HasIndex("eventsEventID");

                    b.ToTable("CategoryEvent", (string)null);
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("MinAge")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("EVENTS", (string)null);
                });

            modelBuilder.Entity("EventFandom", b =>
                {
                    b.Property<int>("EventsEventID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("FandomsFandomID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("EventsEventID", "FandomsFandomID");

                    b.HasIndex("FandomsFandomID");

                    b.ToTable("EventFandom", (string)null);
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("AttendeesUserID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("EventsAttendingEventID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("AttendeesUserID", "EventsAttendingEventID");

                    b.HasIndex("EventsAttendingEventID");

                    b.ToTable("EventUser", (string)null);
                });

            modelBuilder.Entity("FandomUser", b =>
                {
                    b.Property<int>("FandomsFandomID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("FansUserID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("FandomsFandomID", "FansUserID");

                    b.HasIndex("FansUserID");

                    b.ToTable("FandomUser", (string)null);
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.Property<int>("InboxMessageID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("RecipientsUserID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("InboxMessageID", "RecipientsUserID");

                    b.HasIndex("RecipientsUserID");

                    b.ToTable("MessageUser", (string)null);
                });

            modelBuilder.Entity("UserInfo.Badge", b =>
                {
                    b.Property<int>("BadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeID"));

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("BadgeID");

                    b.HasIndex("ProfileID");

                    b.ToTable("BADGES", (string)null);
                });

            modelBuilder.Entity("UserInfo.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("CategoryID");

                    b.HasIndex("ProfileID");

                    b.ToTable("CATEGORIES", (string)null);
                });

            modelBuilder.Entity("UserInfo.Fandom", b =>
                {
                    b.Property<int>("FandomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FandomID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("FandomID");

                    b.HasIndex("ProfileID");

                    b.ToTable("FANDOMS", (string)null);
                });

            modelBuilder.Entity("UserInfo.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<bool>("Seen")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("Sent")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("Timesent")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("MESSAGES", (string)null);
                });

            modelBuilder.Entity("UserInfo.Profile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<int>("Age")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Interests")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Picture")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Pronouns")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("UserID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ProfileID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("PROFILES", (string)null);
                });

            modelBuilder.Entity("UserInfo.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("RAW(2000)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("RAW(2000)");

                    b.Property<string>("Username")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserID");

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("CategoryEvent", b =>
                {
                    b.HasOne("UserInfo.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event", null)
                        .WithMany()
                        .HasForeignKey("eventsEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("UserInfo.User", "Owner")
                        .WithMany("EventsCreated")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EventFandom", b =>
                {
                    b.HasOne("Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo.Fandom", null)
                        .WithMany()
                        .HasForeignKey("FandomsFandomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("UserInfo.User", null)
                        .WithMany()
                        .HasForeignKey("AttendeesUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Event", null)
                        .WithMany()
                        .HasForeignKey("EventsAttendingEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FandomUser", b =>
                {
                    b.HasOne("UserInfo.Fandom", null)
                        .WithMany()
                        .HasForeignKey("FandomsFandomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo.User", null)
                        .WithMany()
                        .HasForeignKey("FansUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.HasOne("UserInfo.Message", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo.User", null)
                        .WithMany()
                        .HasForeignKey("RecipientsUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserInfo.Badge", b =>
                {
                    b.HasOne("UserInfo.Profile", null)
                        .WithMany("Badges")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("UserInfo.Category", b =>
                {
                    b.HasOne("UserInfo.Profile", null)
                        .WithMany("Categories")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("UserInfo.Fandom", b =>
                {
                    b.HasOne("UserInfo.Profile", null)
                        .WithMany("Fandoms")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("UserInfo.Message", b =>
                {
                    b.HasOne("UserInfo.User", "Sender")
                        .WithMany("Outbox")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UserInfo.Profile", b =>
                {
                    b.HasOne("UserInfo.User", "user")
                        .WithOne("UserProfile")
                        .HasForeignKey("UserInfo.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("UserInfo.Profile", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Categories");

                    b.Navigation("Fandoms");
                });

            modelBuilder.Entity("UserInfo.User", b =>
                {
                    b.Navigation("EventsCreated");

                    b.Navigation("Outbox");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
